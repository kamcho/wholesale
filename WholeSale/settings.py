"""
Django settings for WholeSale project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from a local .env file if present (no extra deps)
_env_file = os.path.join(BASE_DIR, '.env')
if os.path.exists(_env_file):
    try:
        with open(_env_file, 'r') as _f:
            for _line in _f:
                _line = _line.strip()
                if not _line or _line.startswith('#'):
                    continue
                if '=' in _line:
                    _k, _v = _line.split('=', 1)
                    _k = _k.strip()
                    _v = _v.strip()
                    # Remove quotes if present
                    if (_v.startswith('"') and _v.endswith('"')) or (_v.startswith("'") and _v.endswith("'")):
                        _v = _v[1:-1]
                    os.environ[_k] = _v
                    _v = _v.strip().strip('"').strip("'")
                    # Do not override already-set env vars
                    if _k and _k not in os.environ:
                        os.environ[_k] = _v
    except Exception:
        # Fail silently if .env cannot be read
        pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w!k609iedac*rt_e$wwwnh&6bl4f-ddyohx(u%1j1%r)s)-f$j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'arhythmically-unciliated-danna.ngrok-free.dev',
    'bibletrivia.pythonanywhere.com',
    '.ngrok-free.dev',  # Allow all ngrok subdomains
]

# Required for CSRF protection with ngrok
CSRF_TRUSTED_ORIGINS = [
    'https://arhythmically-unciliated-danna.ngrok-free.dev',
    'https://*.ngrok-free.dev',
]

# M-Pesa Configuration
MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY', '')
MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET', '')
MPESA_BUSINESS_SHORTCODE = os.getenv('MPESA_BUSINESS_SHORTCODE', '')
MPESA_PASSKEY = os.getenv('MPESA_PASSKEY', '')
MPESA_CALLBACK_URL = os.getenv('MPESA_CALLBACK_URL', 'https://yourdomain.com/api/mpesa-callback/')

# Dynamic hostname for development (ngrok support)
NGROK_HOSTNAME = os.getenv('NGROK_HOSTNAME', 'localhost:8000')
USE_NGROK = os.getenv('USE_NGROK', 'False').lower() == 'true'

# Build callback URL dynamically
if USE_NGROK and NGROK_HOSTNAME != 'localhost:8000':
    MPESA_CALLBACK_URL = f"https://{NGROK_HOSTNAME}/api/mpesa-callback/"


# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
SITE_ID = 1

# Google OAuth settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            'prompt': 'select_account',
        },
        'FETCH_USERINFO': True,
        'APP': {
            'client_id': os.getenv('GOOGLE_OAUTH_CLIENT_ID', ''),
            'secret': os.getenv('GOOGLE_OAUTH_CLIENT_SECRET', ''),
            'key': ''
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

# Custom adapter for social accounts
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# Allauth configuration
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Changed to mandatory for better security
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True

# Use email as the primary identifier
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX = ''
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if not DEBUG else 'http'

# Email settings (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development only
DEFAULT_FROM_EMAIL = 'noreply@importsourcinghub.com'  # Change this to your domain

# For production, use these settings:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'your-smtp-server.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@yourdomain.com'
# EMAIL_HOST_PASSWORD = 'your-email-password'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    
    # Local apps
    'home.apps.HomeConfig',
    'users.apps.UsersConfig',
    'vendor.apps.VendorConfig',
    'core.apps.CoreConfig',
    'agents.apps.AgentsConfig',
    
    # Third-party apps
    'django_countries',
    'django_extensions',
    # 'django_formtools',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Allauth
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'WholeSale.urls'

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Custom user model
AUTH_USER_MODEL = 'users.MyUser'

# Login/Logout URLs
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'profile'  # Will be overridden by the custom authentication backend

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'home.context_processors.cart_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'WholeSale.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration
# Default SQLite configuration for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Only try to use MySQL if explicitly enabled via environment variable
if os.getenv('USE_MYSQL', '').lower() == 'true':
    try:
        import MySQLdb  # noqa: F401
        
        if all(os.getenv(var) for var in ['DB_ENGINE', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST']):
            DATABASES = {
                'default': {
                    'ENGINE': os.getenv('DB_ENGINE'),
                    'NAME': os.getenv('DB_NAME'),
                    'USER': os.getenv('DB_USER'),
                    'PASSWORD': os.getenv('DB_PASSWORD'),
                    'HOST': os.getenv('DB_HOST'),
                    'PORT': os.getenv('DB_PORT', '3306'),
                    'OPTIONS': {
                        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                        'charset': 'utf8mb4',
                    },
                }
            }
        else:
            print('Warning: MySQL environment variables not fully configured. Using SQLite.')
    except ImportError:
        print('Warning: MySQLdb not installed. Using SQLite. Install mysqlclient if you need MySQL support.')


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
AUTH_USER_MODEL = 'users.MyUser'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# ==============================
# External APIs: GavaConnect
# ==============================
# Base URL for sandbox/production
GAVA_BASE_URL = os.environ.get('GAVA_BASE_URL', 'https://sbx.kra.go.ke')
# Client credentials (set in# OpenAI API Settings
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    print("Warning: OPENAI_API_KEY not found in environment variables. Chat functionality will be disabled.")

# GAVA API Settings
GAVA_CLIENT_ID = os.environ.get('GAVA_CLIENT_ID', '')
GAVA_CLIENT_SECRET = os.environ.get('GAVA_CLIENT_SECRET', '')

# M-Pesa API Settings
MPESA_CONSUMER_KEY = os.environ.get('MPESA_CONSUMER_KEY', '')
MPESA_CONSUMER_SECRET = os.environ.get('MPESA_CONSUMER_SECRET', '')
MPESA_BUSINESS_SHORTCODE = os.environ.get('MPESA_BUSINESS_SHORTCODE', '')
MPESA_PASSKEY = os.environ.get('MPESA_PASSKEY', '')
MPESA_CALLBACK_URL = os.environ.get('MPESA_CALLBACK_URL', 'https://arhythmically-unciliated-danna.ngrok-free.dev/api/mpesa-callback/')

# Log M-Pesa configuration status
if not MPESA_CONSUMER_KEY:
    print("Warning: MPESA_CONSUMER_KEY not found. M-Pesa payments will be disabled.")
if not MPESA_CONSUMER_SECRET:
    print("Warning: MPESA_CONSUMER_SECRET not found. M-Pesa payments will be disabled.")
if not MPESA_BUSINESS_SHORTCODE:
    print("Warning: MPESA_BUSINESS_SHORTCODE not found. M-Pesa payments will be disabled.")
if not MPESA_PASSKEY:
    print("Warning: MPESA_PASSKEY not found. M-Pesa payments will be disabled.")
